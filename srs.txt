# Smart Learning Management System (Smart-LMS)

## Overview
Smart-LMS is a modern e-learning platform built with the MERN stack (MongoDB, Express.js, React.js, Node.js). It provides a comprehensive solution for online course creation, management, and learning with features for both instructors and students.

## Features

### Authentication & User Management
- User registration and login with JWT authentication
- Password reset functionality with email verification
- Profile management with photo upload


### Course Management
- Create and manage courses with rich content
- Upload course thumbnails and promotional materials
- Organize content into modules and lessons
- Support for various content types:
  - Video lessons
  - MCQ

### Learning Experience
- Interactive video player with progress tracking
- Course progress visualization
- MCQ attempt tracking
- Course completion certificates


### E-commerce Integration
- Course pricing management
- Shopping cart functionality
- Secure payment processing with Stripe


## Tech Stack

### Frontend
```javascript
- React.js
- Redux Toolkit (State Management)
- Tailwind CSS (Styling)
- Axios (API calls)
- React Router (Navigation)
- Stripe Elements (Payment UI)
```

### Backend
```javascript
- Node.js
- Express.js
- MongoDB with Mongoose
- JWT (Authentication)
- Multer (File Upload)
- Stripe API (Payments)
```

## Project Structure

```
smart-lms/
├── frontend/                # React frontend application
│   ├── src/
│   │   ├── components/     # Reusable UI components
│   │   ├── pages/         # Page components
│   │   ├── redux/         # Redux store and slices
│   │   ├── api/           # API configuration
│   │   └── utils/         # Utility functions
│   └── public/            # Static files
│
├── backend/                # Node.js backend application
│   ├── config/           # Configuration files
│   ├── controllers/      # Route controllers
│   ├── middleware/       # Custom middleware
│   ├── models/          # Mongoose models
│   ├── routes/          # API routes
│   └── utils/           # Utility functions
```

## Running the Application

1. Start the backend server
```bash
cd backend
npm run dev
```

2. Start the frontend application
```bash
cd frontend
npm start
```

## API Documentation

### Authentication Routes
```javascript
POST /api/auth/register   // User registration
POST /api/auth/login      // User login
POST /api/auth/logout     // User logout
GET  /api/auth/me         // Get current user
POST /api/auth/forgot-password    // Request password reset
POST /api/auth/reset-password/:token  // Reset password
```

### Course Routes
```javascript
GET    /api/courses              // Get all courses
GET    /api/courses/:id          // Get course details
POST   /api/instructor/courses   // Create course
PUT    /api/instructor/courses/:id   // Update course
DELETE /api/instructor/courses/:id   // Delete course
```

### User Routes
```javascript
PUT    /api/profile             // Update profile
PUT    /api/profile/photo       // Update profile photo
GET    /api/profile            // Get profile
```
