import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { getCourse } from '../redux/slices/courseSlice';
import { toast } from 'react-toastify';

const CourseDetailPage = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const { course, loading, error } = useSelector(state => state.courses);
  const { isAuthenticated } = useSelector(state => state.auth);

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        await dispatch(getCourse(id)).unwrap();
      } catch (error) {
        console.error('Failed to fetch course:', error);
        toast.error('Failed to load course information');
      }
    };

    if (id) {
      fetchCourse();
      window.scrollTo(0, 0);
    }
  }, [dispatch, id]);

  const handleAddToCart = () => {
    if (!isAuthenticated) {
      toast.info('Please login to add courses to cart');
      navigate('/login');
      return;
    }
    toast.success('Course will be added to cart soon!');
  };

  const handleBuyNow = () => {
    if (!isAuthenticated) {
      toast.info('Please login to purchase courses');
      navigate('/login');
      return;
    }
    toast.success('Buy Now functionality coming soon!');
  };
    }

    if (isInCart) {
      navigate('/cart');
      return;
    }

    if (isAddingToCart) {
      return;
    }

    try {
      setIsAddingToCart(true);
      await dispatch(addToCart(id)).unwrap();
      await dispatch(getCart());
      toast.success('Course added to cart successfully');
      navigate('/cart');
    } catch (error) {
      toast.error(error.message || 'Failed to add course to cart');
    } finally {
      setIsAddingToCart(false);
    }
  };

  const handleBuyNow = () => {
    if (!isAuthenticated) {
      toast.info('Please login to purchase courses');
      navigate('/login');
      return;
    }
    // Add to cart and redirect to checkout
    handleAddToCart();
  };

  if (loading) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-4">Error Loading Course</h2>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Course Not Found</h2>
          <p className="text-gray-600">The course you're looking for doesn't exist.</p>
        </div>
      </div>
    );
  }
        userImage: 'https://randomuser.me/api/portraits/men/58.jpg'
      }
    ]
  };

  // Format and use the course data
  const displayCourse = course ? {
    ...course,
    _id: course._id || id // Ensure we have an ID
  } : {
    ...coursePlaceholder,
    _id: id // Use route param as ID for placeholder
  };

  // Show loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 pt-20">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <div className="animate-pulse space-y-4">
              <div className="h-4 bg-gray-200 rounded w-3/4 mx-auto"></div>
              <div className="h-6 bg-gray-200 rounded w-1/2 mx-auto"></div>
              <div className="h-32 bg-gray-200 rounded mx-auto"></div>
              <div className="flex justify-center space-x-4">
                <div className="h-4 bg-gray-200 rounded w-20"></div>
                <div className="h-4 bg-gray-200 rounded w-20"></div>
                <div className="h-4 bg-gray-200 rounded w-20"></div>
              </div>
            </div>
            <p className="mt-4 text-gray-600">Loading course details...</p>
          </div>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div className="min-h-screen bg-gray-100 pt-20">
        <div className="container mx-auto px-4 py-8">
          <div className="bg-white p-6 rounded-lg shadow-md text-center">
            <svg className="w-16 h-16 text-red-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <h2 className="text-2xl font-bold mb-2">Error Loading Course</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <Link to="/courses" className="inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
              Back to Courses
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <svg className="mx-auto h-16 w-16 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        <h1 className="mt-4 text-2xl font-bold text-gray-800">Error Loading Course</h1>
        <p className="mt-2 text-gray-600">{error}</p>
        <Link to="/courses" className="mt-6 inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
          Return to Courses
        </Link>
      </div>
    );
  }

  return (
    <div className="min-h-screen pb-16">
      import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { getCourse } from '../redux/slices/courseSlice';
import { addToCart, getCart } from '../redux/slices/cartSlice';
import { toast } from 'react-toastify';

const CourseDetailPage = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const { course, loading, error } = useSelector(state => state.courses);
  const { isAuthenticated } = useSelector(state => state.auth);
  const { cart } = useSelector(state => state.cart);
  
  const [isInCart, setIsInCart] = useState(false);
  const [isAddingToCart, setIsAddingToCart] = useState(false);

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        const response = await dispatch(getCourse(id)).unwrap();
        if (!response.success || !response.data) {
          throw new Error('Failed to load course');
        }
      } catch (error) {
        console.error('Failed to fetch course:', error);
        toast.error('Failed to load course information');
      }
    };

    if (id) {
      fetchCourse();
      window.scrollTo(0, 0);
    }
  }, [dispatch, id]);

  useEffect(() => {
    if (cart && cart.items) {
      const courseInCart = cart.items.find(item => item.course === id);
      setIsInCart(!!courseInCart);
    }
  }, [cart, id]);

  const handleAddToCart = async () => {
    if (!isAuthenticated) {
      toast.info('Please login to add courses to cart');
      navigate('/login');
      return;
    }

    if (isInCart) {
      navigate('/cart');
      return;
    }

    if (isAddingToCart) {
      return;
    }

    try {
      setIsAddingToCart(true);
      await dispatch(addToCart(id)).unwrap();
      await dispatch(getCart());
      toast.success('Course added to cart successfully');
      navigate('/cart');
    } catch (error) {
      toast.error(error.message || 'Failed to add course to cart');
    } finally {
      setIsAddingToCart(false);
    }
  };

  const handleBuyNow = () => {
    if (!isAuthenticated) {
      toast.info('Please login to purchase courses');
      navigate('/login');
      return;
    }
    // Add to cart and redirect to checkout
    handleAddToCart();
  };

  if (loading) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-4">Error Loading Course</h2>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Course Not Found</h2>
          <p className="text-gray-600">The course you're looking for doesn't exist.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-10">
      <div className="container mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          {/* Course Header */}
          <div className="relative h-96">
            <img
              src={course.image}
              alt={course.title}
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <div className="text-center text-white">
                <h1 className="text-4xl font-bold mb-4">{course.title}</h1>
                <p className="text-xl mb-4">{course.shortDescription}</p>
                <div className="flex items-center justify-center space-x-4">
                  <span className="bg-blue-600 text-white px-4 py-2 rounded-full">
                    {course.category?.name}
                  </span>
                  <span className="text-yellow-400">
                    ★ {course.rating?.toFixed(1)} ({course.ratingCount} ratings)
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Course Content */}
          <div className="p-8">
            <div className="flex flex-col lg:flex-row gap-8">
              {/* Main Content */}
              <div className="lg:w-2/3">
                <section className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">Course Description</h2>
                  <p className="text-gray-700">{course.description}</p>
                </section>

                {course.whatYouWillLearn && course.whatYouWillLearn.length > 0 && (
                  <section className="mb-8">
                    <h2 className="text-2xl font-bold mb-4">What You'll Learn</h2>
                    <ul className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {course.whatYouWillLearn.map((item, index) => (
                        <li key={index} className="flex items-start space-x-2 text-gray-700">
                          <svg className="w-5 h-5 mt-1 text-green-500 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                          </svg>
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                  </section>
                )}

                {course.requirements && course.requirements.length > 0 && (
                  <section className="mb-8">
                    <h2 className="text-2xl font-bold mb-4">Requirements</h2>
                    <ul className="space-y-2">
                      {course.requirements.map((req, index) => (
                        <li key={index} className="flex items-start space-x-2 text-gray-700">
                          <svg className="w-5 h-5 mt-1 text-blue-500 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4" />
                          </svg>
                          <span>{req}</span>
                        </li>
                      ))}
                    </ul>
                  </section>
                )}
              </div>

              {/* Sidebar */}
              <div className="lg:w-1/3">
                <div className="bg-gray-50 p-6 rounded-lg sticky top-6">
                  <div className="text-center mb-6">
                    <span className="text-3xl font-bold text-gray-900">
                      ${course.price?.toFixed(2)}
                    </span>
                    {course.originalPrice && course.originalPrice > course.price && (
                      <span className="ml-2 text-xl text-gray-500 line-through">
                        ${course.originalPrice.toFixed(2)}
                      </span>
                    )}
                  </div>

                  <div className="space-y-4">
                    <button
                      onClick={handleAddToCart}
                      className="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors"
                      disabled={isAddingToCart}
                    >
                      {isInCart ? 'Go to Cart' : 'Add to Cart'}
                    </button>
                    <button
                      onClick={handleBuyNow}
                      className="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold transition-colors"
                      disabled={isAddingToCart}
                    >
                      Buy Now
                    </button>
                  </div>

                  <div className="mt-6 space-y-4 text-sm text-gray-600">
                    <div className="flex items-center">
                      <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      {course.duration ? `Course length: ${course.duration}` : 'Full lifetime access'}
                    </div>
                    <div className="flex items-center">
                      <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      30-day money-back guarantee
                    </div>
                    <div className="flex items-center">
                      <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                      </svg>
                      Certificate of completion
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CourseDetailPage;
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-12">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row">
            <div className="md:w-2/3 pr-0 md:pr-12 mb-8 md:mb-0">
              <nav className="flex text-sm mb-4" aria-label="Breadcrumb">
                <ol className="inline-flex items-center space-x-1 md:space-x-3">
                  <li className="inline-flex items-center">
                    <Link to="/" className="text-blue-200 hover:text-white">
                      Home
                    </Link>
                  </li>
                  <li>
                    <div className="flex items-center">
                      <svg className="w-5 h-5 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                      </svg>
                      <Link to="/courses" className="ml-1 text-blue-200 hover:text-white">
                        Courses
                      </Link>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center">
                      <svg className="w-5 h-5 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                      </svg>
                      <Link to={`/courses?category=${displayCourse.category}`} className="ml-1 text-blue-200 hover:text-white">
                        {displayCourse.category}
                      </Link>
                    </div>
                  </li>
                </ol>
              </nav>
              
              <h1 className="text-3xl md:text-4xl font-bold mb-4">{displayCourse.title}</h1>
              
              <p className="text-lg text-blue-100 mb-6">{displayCourse.description}</p>
              
              <div className="flex flex-wrap items-center mb-6">
                <div className="flex items-center mr-6 mb-2">
                  <div className="flex mr-2">
                    {renderStarRating(displayCourse.rating)}
                  </div>
                  <span>
                    {displayCourse.rating} ({displayCourse.ratingCount?.toLocaleString() || '0'} ratings)
                  </span>
                </div>
                
                <div className="flex items-center mr-6 mb-2">
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                  <span>{displayCourse.enrolled?.toLocaleString() || '0'} students</span>
                </div>
                
                <div className="flex items-center mr-6 mb-2">
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>{displayCourse.duration}</span>
                </div>
                
                <div className="flex items-center mr-6 mb-2">
                  <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                  </svg>
                  <span>Last updated {displayCourse.lastUpdated}</span>
                </div>
              </div>
              
              <div className="flex items-center mb-4">
                <img 
                  src={displayCourse.instructor?.image} 
                  alt={displayCourse.instructor?.name} 
                  className="w-10 h-10 rounded-full mr-3"
                />
                <div>
                  <p className="text-sm">Created by</p>
                  <p className="font-medium">{displayCourse.instructor?.name}</p>
                </div>
              </div>
            </div>
            
            <div className="md:w-1/3">
              <div className="bg-white rounded-lg shadow-md overflow-hidden text-gray-800">
                <div className="relative h-48">
                  <img 
                    src={displayCourse.image} 
                    alt={displayCourse.title} 
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center">
                    <svg className="w-16 h-16 text-white opacity-80" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                    </svg>
                  </div>
                </div>
                
                <div className="p-6">
                  <div className="flex items-center mb-4">
                    <span className="text-3xl font-bold">${displayCourse.price?.toFixed(2) || '0.00'}</span>
                    {displayCourse.originalPrice && (
                      <>
                        <span className="text-lg text-gray-500 line-through ml-3">
                          ${displayCourse.originalPrice?.toFixed(2) || '0.00'}
                        </span>
                        <span className="ml-3 bg-green-100 text-green-800 text-sm px-2 py-1 rounded">
                          {Math.round((1 - (displayCourse.price || 0) / (displayCourse.originalPrice || 1)) * 100)}% off
                        </span>
                      </>
                    )}
                  </div>
                  
                  {isAuthenticated ? (
                      <div className="space-y-3">
                        <button
                          onClick={handleAddToCart}
                          className="w-full py-3 px-4 bg-blue-600 text-white text-center rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center"
                        >
                          <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                          </svg>
                          Add to Cart
                        </button>
                        <Link
                          to="/checkout"
                          className="w-full py-3 px-4 bg-green-600 text-white text-center rounded-md hover:bg-green-700 transition-colors block"
                        >
                          Buy Now
                        </Link>
                      </div>
                  ) : (
                    <div className="space-y-3">
                      <Link 
                        to="/login" 
                        className="block w-full py-3 px-4 bg-blue-600 text-white text-center rounded-md hover:bg-blue-700 transition-colors"
                      >
                        Log in to Purchase
                      </Link>
                      <p className="text-center text-sm text-gray-500">
                        New to EduStream?{' '}
                        <Link to="/register" className="text-blue-600 hover:text-blue-800">
                          Sign up
                        </Link>
                      </p>
                    </div>
                  )}
                  
                  <div className="mt-6 space-y-4">
                    <h3 className="font-bold text-center">This course includes:</h3>
                    <ul className="space-y-2">
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        <span>{displayCourse.duration} on-demand video</span>
                      </li>
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <span>25+ coding exercises</span>
                      </li>
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>10 articles</span>
                      </li>
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                        </svg>
                        <span>Downloadable resources</span>
                      </li>
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <span>Full lifetime access</span>
                      </li>
                      <li className="flex items-center">
                        <svg className="w-5 h-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        <span>Certificate of completion</span>
                      </li>
                    </ul>
                  </div>
                  
                  <div className="mt-6 flex justify-center space-x-4">
                    <button className="text-gray-500 hover:text-gray-700">
                      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                      </svg>
                    </button>
                    <button className="text-gray-500 hover:text-gray-700">
                      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                    </button>
                    <button className="text-gray-500 hover:text-gray-700">
                      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Course Content */}
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          <div className="lg:w-2/3">
            {/* Tabs */}
            <div className="mb-8 border-b border-gray-200">
              <nav className="flex -mb-px">
                <button
                  onClick={() => setActiveTab('overview')}
                  className={`mr-8 py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'overview'
                      ? 'border-blue-600 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Overview
                </button>
                <button
                  onClick={() => setActiveTab('curriculum')}
                  className={`mr-8 py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'curriculum'
                      ? 'border-blue-600 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Curriculum
                </button>
                <button
                  onClick={() => setActiveTab('instructor')}
                  className={`mr-8 py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'instructor'
                      ? 'border-blue-600 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Instructor
                </button>
                <button
                  onClick={() => setActiveTab('reviews')}
                  className={`mr-8 py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'reviews'
                      ? 'border-blue-600 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  Reviews
                </button>
              </nav>
            </div>
            
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div>
                <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">About This Course</h2>
                  <div 
                    className="prose max-w-none text-gray-700"
                    dangerouslySetInnerHTML={{ __html: displayCourse.longDescription }}
                  />
                </div>
                
                <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">What You'll Learn</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {displayCourse.whatYouWillLearn?.map((item, index) => (
                      <div key={index} className="flex">
                        <svg className="flex-shrink-0 w-5 h-5 text-green-500 mt-1 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        <span>{item}</span>
                      </div>
                    )) || <div className="text-gray-500">Course learning objectives coming soon</div>}
                  </div>
                </div>
                
                <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">Requirements</h2>
                  <ul className="list-disc pl-6 space-y-2 text-gray-700">
                    {displayCourse.requirements?.map((item, index) => (
                      <li key={index}>{item}</li>
                    )) || <li>No specific requirements for this course</li>}
                  </ul>
                </div>
                
                <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-4">This Course Is For</h2>
                  <ul className="list-disc pl-6 space-y-2 text-gray-700">
                    <li>Complete beginners with no prior programming experience</li>
                    <li>Web developers looking to expand their skillset</li>
                    <li>Anyone wanting to learn modern web development technologies</li>
                    <li>Self-taught developers who want to fill in knowledge gaps</li>
                    <li>Students who want to build real-world projects for their portfolio</li>
                  </ul>
                </div>
              </div>
            )}
            
            {/* Curriculum Tab */}
            {activeTab === 'curriculum' && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <h2 className="text-2xl font-bold">Course Content</h2>
                  <div className="text-sm text-gray-600">
                    {displayCourse.curriculum ? 
                      `${displayCourse.curriculum.reduce((total, section) => total + (section.lectures || 0), 0)} lectures • ${displayCourse.duration}`
                      : 'Curriculum details loading...'
                    }
                  </div>
                </div>
                
                <div className="space-y-4">
                  {displayCourse.curriculum?.map((section) => (
                    <div key={section.id} className="border border-gray-200 rounded-lg overflow-hidden">
                      <button
                        onClick={() => toggleSection(section.id)}
                        className="w-full flex justify-between items-center p-4 bg-gray-50 hover:bg-gray-100 focus:outline-none"
                      >
                        <div className="flex-1">
                          <h3 className="text-lg font-medium text-left">{section.title}</h3>
                          <div className="text-sm text-gray-500 mt-1">
                            {section.lectures} lectures • {section.duration}
                          </div>
                        </div>
                        <svg
                          className={`w-6 h-6 transform ${expandedSections[section.id] ? 'rotate-180' : ''} transition-transform`}
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </button>
                      
                      {expandedSections[section.id] && (
                        <div className="border-t border-gray-200">
                          {section.content?.map((lecture) => (
                            <div key={lecture.id} className="p-4 border-b border-gray-200 last:border-b-0 flex justify-between items-center">
                              <div className="flex items-center">
                                <svg className="w-5 h-5 text-gray-400 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664l-3-2z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>{lecture.title}</span>
                              </div>
                              <span className="text-sm text-gray-500">{lecture.duration}</span>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  )) || (
                    <div className="bg-white rounded-lg shadow-md p-6 text-center">
                      <p className="text-gray-500">Curriculum details are not available for this course.</p>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Instructor Tab */}
            {activeTab === 'instructor' && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Meet Your Instructor</h2>
                <div className="bg-white rounded-lg shadow-md p-6">
                  <div className="flex flex-col md:flex-row items-center md:items-start">
                    <img 
                      src={displayCourse.instructor?.image} 
                      alt={displayCourse.instructor?.name} 
                      className="w-32 h-32 rounded-full mb-4 md:mb-0 md:mr-6"
                    />
                    <div>
                      <h3 className="text-xl font-bold mb-2">{displayCourse.instructor?.name}</h3>
                      <p className="text-gray-600 mb-4">{displayCourse.instructor?.bio}</p>
                      <div className="flex items-center mb-4">
                        <svg className="w-5 h-5 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                        <span className="text-gray-700">4.8 Instructor Rating</span>
                      </div>
                      <div className="space-y-2 text-gray-700">
                        <div className="flex items-center">
                          <svg className="w-5 h-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          <span>15 Courses</span>
                        </div>
                        <div className="flex items-center">
                          <svg className="w-5 h-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                          </svg>
                          <span>125,000+ Students</span>
                        </div>
                        <div className="flex items-center">
                          <svg className="w-5 h-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                          </svg>
                          <span>3,500+ Reviews</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Reviews Tab */}
            {activeTab === 'reviews' && (
              <div>
                <div className="mb-8">
                  <h2 className="text-2xl font-bold mb-6">Student Reviews</h2>
                  <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                    <div className="flex flex-col md:flex-row items-center">
                      <div className="md:w-1/3 text-center mb-6 md:mb-0">
                        <div className="text-5xl font-bold text-yellow-500 mb-2">{displayCourse.rating}</div>
                        <div className="flex justify-center mb-2">
                          {renderStarRating(displayCourse.rating)}
                        </div>
                        <div className="text-sm text-gray-500">Course Rating</div>
                      </div>
                      <div className="md:w-2/3 md:pl-8">
                        <div className="space-y-2">
                          <div className="flex items-center">
                            <div className="w-24 text-sm text-gray-600 flex">
                              <span>5 stars</span>
                              <div className="flex ml-1">
                                {renderStarRating(5).slice(0, 1)}
                              </div>
                            </div>
                            <div className="flex-1 ml-4">
                              <div className="bg-gray-200 rounded-full h-2.5">
                                <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: '76%' }}></div>
                              </div>
                            </div>
                            <div className="w-12 text-right text-sm text-gray-600">76%</div>
                          </div>
                          <div className="flex items-center">
                            <div className="w-24 text-sm text-gray-600 flex">
                              <span>4 stars</span>
                              <div className="flex ml-1">
                                {renderStarRating(4).slice(0, 1)}
                              </div>
                            </div>
                            <div className="flex-1 ml-4">
                              <div className="bg-gray-200 rounded-full h-2.5">
                                <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: '18%' }}></div>
                              </div>
                            </div>
                            <div className="w-12 text-right text-sm text-gray-600">18%</div>
                          </div>
                          <div className="flex items-center">
                            <div className="w-24 text-sm text-gray-600 flex">
                              <span>3 stars</span>
                              <div className="flex ml-1">
                                {renderStarRating(3).slice(0, 1)}
                              </div>
                            </div>
                            <div className="flex-1 ml-4">
                              <div className="bg-gray-200 rounded-full h-2.5">
                                <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: '4%' }}></div>
                              </div>
                            </div>
                            <div className="w-12 text-right text-sm text-gray-600">4%</div>
                          </div>
                          <div className="flex items-center">
                            <div className="w-24 text-sm text-gray-600 flex">
                              <span>2 stars</span>
                              <div className="flex ml-1">
                                {renderStarRating(2).slice(0, 1)}
                              </div>
                            </div>
                            <div className="flex-1 ml-4">
                              <div className="bg-gray-200 rounded-full h-2.5">
                                <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: '1%' }}></div>
                              </div>
                            </div>
                            <div className="w-12 text-right text-sm text-gray-600">1%</div>
                          </div>
                          <div className="flex items-center">
                            <div className="w-24 text-sm text-gray-600 flex">
                              <span>1 star</span>
                              <div className="flex ml-1">
                                {renderStarRating(1).slice(0, 1)}
                              </div>
                            </div>
                            <div className="flex-1 ml-4">
                              <div className="bg-gray-200 rounded-full h-2.5">
                                <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: '1%' }}></div>
                              </div>
                            </div>
                            <div className="w-12 text-right text-sm text-gray-600">1%</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-6">
                    {displayCourse.reviews?.map(review => (
                      <div key={review.id} className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex items-start">
                          <img 
                            src={review.userImage} 
                            alt={review.user} 
                            className="w-12 h-12 rounded-full mr-4"
                          />
                          <div className="flex-1">
                            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2">
                              <h4 className="font-bold">{review.user}</h4>
                              <div className="text-sm text-gray-500 mt-1 sm:mt-0">{review.date}</div>
                            </div>
                            <div className="flex mb-3">
                              {renderStarRating(review.rating)}
                            </div>
                            <p className="text-gray-700">{review.comment}</p>
                            <div className="mt-4 flex items-center text-sm text-gray-500">
                              <button className="flex items-center hover:text-blue-600 mr-4">
                                <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
                                </svg>
                                Helpful
                              </button>
                              <button className="hover:text-blue-600">
                                Report
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    )) || (
                      <div className="bg-white rounded-lg shadow-md p-6 text-center">
                        <p className="text-gray-500">No reviews available for this course yet.</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="lg:w-1/3">
            {/* Recommended Courses */}
            <div className="bg-white rounded-lg shadow-md p-6 mb-6">
              <h2 className="text-xl font-bold mb-4">Similar Courses</h2>
              <div className="space-y-4">
                {[1, 2, 3].map((num) => (
                  <div key={num} className="flex">
                    <img 
                      src={`https://images.unsplash.com/photo-${num === 1 ? '1503437313258-c6f8d5dea7f2' : num === 2 ? '1517694712202-14dd9538aa97' : '1511376777868-611b54f68947'}?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80`}
                      alt="Course" 
                      className="w-20 h-20 object-cover rounded mr-4"
                    />
                    <div>
                      <h3 className="font-medium mb-1 line-clamp-2">
                        <Link to="#" className="hover:text-blue-600">
                          {num === 1 ? 'Advanced JavaScript Concepts' : num === 2 ? 'Modern React with Redux' : 'Node.js API Masterclass'}
                        </Link>
                      </h3>
                      <div className="flex items-center text-sm text-gray-500">
                        <div className="flex mr-1">
                          {renderStarRating(4.5).slice(0, 3)}
                        </div>
                        <span>{num === 1 ? '4.6' : num === 2 ? '4.8' : '4.7'}</span>
                      </div>
                      <p className="text-gray-700 font-medium mt-1">${num === 1 ? '79.99' : num === 2 ? '89.99' : '84.99'}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Course Tags */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-bold mb-4">Course Tags</h2>
              <div className="flex flex-wrap gap-2">
                {['Web Development', 'JavaScript', 'React', 'Node.js', 'MongoDB', 'Full Stack', 'Frontend', 'Backend', 'Responsive Design'].map((tag) => (
                  <Link 
                    key={tag}
                    to={`/courses?tag=${tag}`}
                    className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-md hover:bg-gray-200"
                  >
                    {tag}
                  </Link>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CourseDetailPage;
